openapi: 3.0.0
info:
  title: Node Upskilling API
  description: A comprehensive REST API for blog management with authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Categories
    description: Blog category management
  - name: Blogs
    description: Blog post management
  - name: Documentation
    description: API documentation endpoints

security:
  - bearerAuth: []

paths:
  # Authentication endpoints
  /api/auth/login:
    post:
      summary: User login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Invalid credentials or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - $ref: '#/components/schemas/ValidationErrorResponse'

  /api/auth/register:
    post:
      summary: User registration
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: User already exists or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - $ref: '#/components/schemas/ValidationErrorResponse'

  # User endpoints
  /api/users/{id}:
    patch:
      summary: Update user information
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User unique identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Category endpoints
  /api/categories:
    get:
      summary: Get all categories
      tags: [Categories]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new category
      tags: [Categories]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        400:
          description: Category already exists or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/categories/{id}:
    put:
      summary: Update a category
      tags: [Categories]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category unique identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a category
      tags: [Categories]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category unique identifier
      responses:
        200:
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Blog endpoints
  /api/blogs:
    get:
      summary: Get all blogs with pagination and filtering
      tags: [Blogs]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of blogs per page
        - in: query
          name: categoryId
          schema:
            type: string
          description: Filter blogs by category ID
        - in: query
          name: ownerId
          schema:
            type: string
          description: Filter blogs by owner ID
        - in: query
          name: title
          schema:
            type: string
          description: Search blogs by title (case-insensitive partial match)
        - in: query
          name: content
          schema:
            type: string
          description: Search blogs by content (case-insensitive partial match)
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order by creation date
      responses:
        200:
          description: Blogs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new blog post
      tags: [Blogs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        201:
          description: Blog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogResponse'
        400:
          description: Blog already exists or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/blogs/{id}:
    get:
      summary: Get a specific blog by ID
      tags: [Blogs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Blog unique identifier
      responses:
        200:
          description: Blog retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a blog post (owner only)
      tags: [Blogs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Blog unique identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        200:
          description: Blog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogResponse'
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Not authorized to update this blog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a blog post (owner only)
      tags: [Blogs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Blog unique identifier
      responses:
        200:
          description: Blog deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogResponse'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Not authorized to delete this blog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Documentation endpoints
  /api-docs.json:
    get:
      summary: Get OpenAPI specification in JSON format
      tags: [Documentation]
      security: []
      responses:
        200:
          description: OpenAPI 3.0 specification
          content:
            application/json:
              schema:
                type: object
                description: Complete OpenAPI specification for this API

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # Base schemas
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          description: User's password (must meet complexity requirements)
          example: "SecurePass123!"

    UserUpdate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's full name
          example: "John Doe"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          description: User's password
          example: "SecurePass123!"

    Category:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: Category name
          example: "Technology"

    Blog:
      type: object
      required:
        - title
        - content
        - category
      properties:
        title:
          type: string
          minLength: 2
          maxLength: 50
          description: Blog post title
          example: "Introduction to Node.js"
        content:
          type: string
          minLength: 10
          description: Blog post content
          example: "This is a comprehensive guide to Node.js development..."
        category:
          type: string
          description: MongoDB ObjectID of the category
          example: "507f1f77bcf86cd799439011"

    # Response schemas
    UserResponse:
      type: object
      properties:
        _id:
          type: string
          description: User's unique identifier
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
          example: "2023-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp
          example: "2023-01-15T10:30:00.000Z"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            _id:
              type: string
              description: User's unique identifier
              example: "507f1f77bcf86cd799439011"
            name:
              type: string
              description: User's full name
              example: "John Doe"
            email:
              type: string
              format: email
              description: User's email address
              example: "john.doe@example.com"

    CategoryResponse:
      type: object
      properties:
        _id:
          type: string
          description: Category's unique identifier
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          description: Category name
          example: "Technology"
        createdAt:
          type: string
          format: date-time
          description: Category creation timestamp
          example: "2023-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Category last update timestamp
          example: "2023-01-15T10:30:00.000Z"

    BlogResponse:
      type: object
      properties:
        _id:
          type: string
          description: Blog's unique identifier
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          description: Blog post title
          example: "Introduction to Node.js"
        content:
          type: string
          description: Blog post content
          example: "This is a comprehensive guide to Node.js development..."
        category:
          $ref: '#/components/schemas/CategoryResponse'
        owner:
          type: object
          properties:
            _id:
              type: string
              description: Owner's unique identifier
              example: "507f1f77bcf86cd799439011"
            name:
              type: string
              description: Owner's full name
              example: "John Doe"
            email:
              type: string
              format: email
              description: Owner's email address
              example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          description: Blog creation timestamp
          example: "2023-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Blog last update timestamp
          example: "2023-01-15T10:30:00.000Z"

    PaginatedBlogResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BlogResponse'
        total:
          type: integer
          description: Total number of blogs matching the filter
          example: 42
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 10

    # Error schemas
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Resource not found"

    ValidationErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that failed validation
                example: "email"
              message:
                type: string
                description: Validation error message
                example: "Invalid email format"
